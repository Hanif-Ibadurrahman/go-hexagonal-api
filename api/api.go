package api

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/sergicanet9/go-hexagonal-api/adapters/handlers"
	"github.com/sergicanet9/go-hexagonal-api/adapters/repositories/mongo"
	"github.com/sergicanet9/go-hexagonal-api/adapters/repositories/postgres"
	"github.com/sergicanet9/go-hexagonal-api/async"
	"github.com/sergicanet9/go-hexagonal-api/config"
	"github.com/sergicanet9/go-hexagonal-api/core/ports"
	"github.com/sergicanet9/go-hexagonal-api/core/services"
	_ "github.com/sergicanet9/go-hexagonal-api/docs" // docs is generated by Swag CLI, needs to be imported.
	infraMongo "github.com/sergicanet9/scv-go-framework/v2/infrastructure/mongo"
	infraPostgres "github.com/sergicanet9/scv-go-framework/v2/infrastructure/postgres"
	httpSwagger "github.com/swaggo/http-swagger"
)

// API struct
type API struct {
	config config.Config
	router *mux.Router
}

// Initialize API
func (a *API) Initialize(ctx context.Context, cfg config.Config) {
	a.config = cfg

	router := mux.NewRouter()
	a.router = router

	var userRepo ports.UserRepository
	switch a.config.Database {
	case "mongo":
		db, err := infraMongo.ConnectMongoDB(ctx, a.config.MongoDBName, a.config.MongoConnectionString)
		if err != nil {
			log.Fatal(err)
		}
		userRepo = mongo.NewUserRepository(db)
	case "postgres":
		db, err := infraPostgres.ConnectPostgresDB(a.config.PostgresConnectionString)
		if err != nil {
			log.Fatal(err)
		}
		userRepo = postgres.NewUserRepository(db)
	default:
		log.Fatalf("database flag %s not valid", a.config.Database)
	}

	userService := services.NewUserService(a.config, userRepo)

	handlers.SetHealthRoutes(ctx, a.config, a.router)
	handlers.SetUserRoutes(ctx, a.config, a.router, userService)

	a.router.PathPrefix("/swagger").Handler(
		httpSwagger.Handler(httpSwagger.URL(fmt.Sprintf("%s:%d/swagger/doc.json", a.config.Address, a.config.Port))),
	)

	if a.config.Async.Run {
		async := async.NewAsync(a.config)
		go async.Run(ctx)
	}
}

// Run API
func (a *API) Run() {
	log.Printf("Version: %s", a.config.Version)
	log.Printf("Environment: %s", a.config.Environment)
	log.Printf("Database: %s", a.config.Database)
	log.Printf("Listening on port %d", a.config.Port)
	log.Printf("Open %s:%d/swagger/index.html in the browser", a.config.Address, a.config.Port)
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%d", a.config.Port), a.router))
}
