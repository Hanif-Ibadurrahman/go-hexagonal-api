package api

import (
	"fmt"
	"log"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/scanet9/go-mongo-restapi/api/handlers"
	"github.com/scanet9/go-mongo-restapi/business"
	"github.com/scanet9/go-mongo-restapi/config"
	_ "github.com/scanet9/go-mongo-restapi/docs" // docs is generated by Swag CLI, needs to be imported.
	infrastructure "github.com/scanet9/scv-go-framework/v2/infrastructure/mongo"
	httpSwagger "github.com/swaggo/http-swagger"
)

// API struct
type API struct {
	Router *mux.Router
}

// Initialize API
func (a *API) Initialize() {
	router := mux.NewRouter()
	a.Router = router

	a.Router.PathPrefix("/swagger").Handler(
		httpSwagger.Handler(httpSwagger.URL(fmt.Sprintf("http://localhost:%d/swagger/doc.json", config.APIPort))),
	)

	db, err := infrastructure.ConnectMongoDB(config.DbName, config.DbConnectionString)
	if err != nil {
		panic(err)
	}

	userService := business.NewUserService(db)
	handlers.SetUserRoutes(a.Router, userService)
}

// Run API
func (a *API) Run() {
	log.Printf("Listening on port %d", config.APIPort)
	log.Printf("Open http://localhost:%d in the browser", config.APIPort)
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%d", config.APIPort), a.Router))
}
