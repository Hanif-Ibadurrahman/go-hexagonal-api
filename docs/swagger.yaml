definitions:
  requests.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requests.Update:
    properties:
      email:
        type: string
      name:
        type: string
      new_password:
        type: string
      old_password:
        type: string
      surnames:
        type: string
    type: object
  requests.User:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      surnames:
        type: string
    type: object
  responses.Creation:
    properties:
      insertedId:
        type: string
    type: object
  responses.Login:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/responses.User'
        type: object
    type: object
  responses.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      surnames:
        type: string
    type: object
info:
  contact: {}
  description: Powered by scv-go-framework - https://github.com/scanet9/scv-go-framework
  license: {}
  title: Go Mongo RestAPI
  version: "1.0"
paths:
  /api/users:
    get:
      description: Gets all the users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.User'
            type: array
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - Users
    post:
      description: Creates a new user
      parameters:
      - description: New user to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.User'
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/responses.Creation'
      summary: Create user
      tags:
      - Users
  /api/users/{id}:
    delete:
      description: Delete a user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Get a user by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - Users
    patch:
      description: Update a user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.Update'
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Update user
      tags:
      - Users
  /api/users/email/{email}:
    get:
      description: Get a user by email
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
      security:
      - Bearer: []
      summary: Get user by email
      tags:
      - Users
  /api/users/login:
    post:
      description: Logs in an user
      parameters:
      - description: Login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/requests.Login'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Login'
      summary: Login user
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
