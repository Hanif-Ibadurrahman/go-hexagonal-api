name: CD

on:
  push:
    tags:
       - '*'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: arnested/go-version-action@v1
        id: go-version
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.go-version.outputs.minimal }}
      - name: Run unit tests
        run: make test-unit
      - name: Go coverage badge
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out
      - name: Verify changed files
        uses: tj-actions/verify-changed-files@v12
        id: verify-changed-files
        with:
          files: README.md
      - name: Commit changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "s.canet9@outlook.com"
          git config --local user.name "Sergi Canet"
          git add README.md
          git commit -m "chore: Update coverage badge."
      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          branch: ${{ github.head_ref }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v2
      - uses: arnested/go-version-action@v1
        id: go-version
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.go-version.outputs.minimal }}
      - name: Run integration tests
        run: make test-integration

  build-mongo-dev:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
    - id: vars
      run: echo ::set-output name=tag::$(echo ${{ github.ref_name }} | xargs basename)
    - uses: actions/checkout@v2
    - uses: azure/docker-login@v1
      with:
        login-server: scvregistry.azurecr.io
        username: ${{ secrets.AzureContainerRegistry_Username }}
        password: ${{ secrets.AzureContainerRegistry_Password }}
    - name: Build mongo dev
      run: |
        export VERSION=${{ steps.vars.outputs.tag }} && export ENV=dev && export PORT=443 && export DB=mongo && docker-compose build --no-cache
        docker tag go-hexagonal-api-mongo.dev:${{ steps.vars.outputs.tag }} scvregistry.azurecr.io/go-hexagonal-api-mongo.dev:${{ steps.vars.outputs.tag }}
        docker push scvregistry.azurecr.io/go-hexagonal-api-mongo.dev:${{ steps.vars.outputs.tag }}
  
  build-postgres-dev:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
    - id: vars
      run: echo ::set-output name=tag::$(echo ${{ github.ref_name }} | xargs basename)
    - uses: actions/checkout@v2
    - uses: azure/docker-login@v1
      with:
        login-server: scvregistry.azurecr.io
        username: ${{ secrets.AzureContainerRegistry_Username }}
        password: ${{ secrets.AzureContainerRegistry_Password }}
    - name: Build postgres dev
      run: |
        export VERSION=${{ steps.vars.outputs.tag }} && export ENV=dev && export PORT=443 && export DB=postgres && docker-compose build --no-cache
        docker tag go-hexagonal-api-postgres.dev:${{ steps.vars.outputs.tag }} scvregistry.azurecr.io/go-hexagonal-api-postgres.dev:${{ steps.vars.outputs.tag }}
        docker push scvregistry.azurecr.io/go-hexagonal-api-postgres.dev:${{ steps.vars.outputs.tag }}

  deploy-mongo-dev:
    runs-on: ubuntu-latest
    needs: build-mongo-dev
    environment: mongo-dev
    steps:
    - id: vars
      run: echo ::set-output name=tag::$(echo ${{ github.ref_name }} | xargs basename)
    - name: Deploy mongo dev
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'go-hexagonal-api-mongo-dev'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_Mongo_Dev }}
        images: 'scvregistry.azurecr.io/go-hexagonal-api-mongo.dev:${{ steps.vars.outputs.tag }}'

  deploy-postgres-dev:
    runs-on: ubuntu-latest
    needs: build-postgres-dev
    environment: postgres-dev
    steps:
    - id: vars
      run: echo ::set-output name=tag::$(echo ${{ github.ref_name }} | xargs basename)
    - name: Deploy postgres dev
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'go-hexagonal-api-postgres-dev'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_Postgres_Dev }}
        images: 'scvregistry.azurecr.io/go-hexagonal-api-postgres.dev:${{ steps.vars.outputs.tag }}'
